name: buildx

on:
  pull_request:
    branches: master

  push:
    branches: master
    tags:
      - '*'

  release:
    types:
      - created

env:
  IMAGE_NAME: shanedabes/rm_scraper

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Lint
        uses: docker://mushus/golangci-linter:1.1.2

      - name: Test
        uses: shoukoo/golang-pipeline/go1.13/test@master

  docker:
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          version: latest

      - name: Login to registry
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u shanedabes --password-stdin

      - name: Build and push
        run: |
          IMAGE_ID=$IMAGE_NAME

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker buildx build \
            --push \
            --platform linux/amd64,linux/arm,linux/arm64/v8 \
            --tag ${IMAGE_ID}:${VERSION} \
            --file ./Dockerfile .

  release:
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Unshallow
        run: git fetch --prune --unshallow

      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.13.8

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v1
        with:
          version: latest
          args: release --rm-dist
          key: ${{ secrets.YOUR_PRIVATE_KEY }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
